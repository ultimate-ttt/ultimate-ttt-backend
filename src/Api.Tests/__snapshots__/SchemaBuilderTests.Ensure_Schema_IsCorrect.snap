schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Game {
  id: ID!
  moves: [Move!]!
  winner: Winner
  finishedAt: Date
}

type Move {
  id: ID!
  boardPosition: Position!
  tilePosition: Position!
  player: Player!
  moveNumber: Int!
  game: Game!
}

type MoveResult {
  isValid: Boolean!
  move: Move!
  invalidReason: String
  moveFinishedBoard: Boolean!
  moveFinishedGame: Boolean!
}

type Mutation {
  createGame: Game!
  move(input: MoveInput!): MoveResult!
}

type Position {
  x: Int!
  y: Int!
  equals: Boolean!
}

type Query {
  game(id: ID!): Game
}

type Subscription {
  onMove(gameId: String! player: Player!): Move!
}

input MoveInput {
  gameId: ID!
  player: Player!
  boardPosition: PositionInput!
  tilePosition: PositionInput!
}

input PositionInput {
  x: Int!
  y: Int!
}

enum Player {
  CROSS
  CIRCLE
}

enum Winner {
  CROSS
  CIRCLE
  NONE
  DRAW
}

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String

"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID."
scalar ID

"The `Boolean` scalar type represents `true` or `false`."
scalar Boolean

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

"The `Date` scalar represents an ISO-8601 compliant date type."
scalar Date
